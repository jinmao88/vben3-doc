import{_ as s,o as a,c as n,a as p}from"./app.23af2f2a.js";const C=JSON.parse('{"title":"构建 & 部署","description":"","frontmatter":{},"headers":[{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[{"level":3,"title":"安装 pnpm","slug":"安装-pnpm","link":"#安装-pnpm","children":[]}]},{"level":2,"title":"部署","slug":"部署","link":"#部署","children":[]}],"relativePath":"guide/deploy.md","lastUpdated":1709085296000}'),l={name:"guide/deploy.md"},e=p(`<h1 id="构建-部署" tabindex="-1">构建 &amp; 部署 <a class="header-anchor" href="#构建-部署" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">前置环境</p><ul><li><a href="https://git-scm.com" target="_blank" rel="noreferrer">Git</a></li><li><a href="https://nodejs.org/en" target="_blank" rel="noreferrer">NodeJs 16.x +</a></li><li><a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a> 包管理器</li></ul></div><h2 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-hidden="true">#</a></h2><p><a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a> 内置了对 monorepo（又名多包存储库、多项目存储库或整体存储库）的支持。您可以创建一个工作区，以将多个项目合并到单个存储库中。工作区的根目录中必须有一个 <code>pnpm-workspace.yaml</code> 文件。工作区的根 <code>.npmrc</code> 中也可能有一个。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本文对 pnpm 的介绍不如官网文档详细，您可以去 pnpm 的官网获取更加详细的介绍：<a href="https://pnpm.io" target="_blank" rel="noreferrer">https://pnpm.io</a>。</p></div><h3 id="安装-pnpm" tabindex="-1">安装 pnpm <a class="header-anchor" href="#安装-pnpm" aria-hidden="true">#</a></h3><p>如果已经安装了 NodeJs，那么大概率 npm 包管理器也会随之安装，由于其使用较为方便，我们使用该工具安装 pnpm。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># npm 设置淘宝镜像源（推荐）</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://registry.npmmirror.com</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 全局安装 pnpm</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span></span>
<span class="line"></span></code></pre></div><p>如果您已经配置过其它镜像源，只想本次安装的时候使用淘宝的镜像源来全局安装 pnpm，则可以使用以下命令，该命令不会改变您默认的 npm 配置：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--registry=http://registry.npmmirror.com</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span></span>
<span class="line"></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意</p><ul><li>该项目不支持 npm，如果强行使用，将会造成无法预知的结果；</li><li>pnpm 安装后默认使用 npm 配置的镜像源地址，如果您需要更多配置，可以参阅：<a href="https://pnpm.io/configuring" target="_blank" rel="noreferrer">https://pnpm.io/configuring</a></li></ul></div><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># clone 仓库</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/vbenjs/vben3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 以开发模式启动项目</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li><p>如果本项目是第一次在本地环境运行，启动项目的时候可能会弹出安装证书或者是否信任证书的弹框，选择安装或者是即可；</p></li><li><p>如果本地启动时没有弹出弹框，则可以修改 <code>apps/admin/.env.development</code> 配置文件，关闭 https 后再次尝试启动项目；</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">VITE_USE_HTTPS</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"></span></code></pre></div></li><li><p>启动成功后访问：<a href="https://localhost:3000" target="_blank" rel="noreferrer">https://localhost:3000</a>，默认端口为3000.</p></li></ul></div>`,14),t=[e];function o(r,c,i,d,h,m){return a(),n("div",null,t)}const g=s(l,[["render",o]]);export{C as __pageData,g as default};
