import{_ as s,c as a,o as n,a3 as e}from"./chunks/framework.CNR3DNuL.js";const E=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"packages/hooks/intro.md","filePath":"packages/hooks/intro.md","lastUpdated":1710799743000}'),i={name:"packages/hooks/intro.md"},l=e(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>Vue hooks 受到 React hooks启发，可以让开发人员在不编写class的情况下使用状态和其他功能。</p><p>hooks 主要对模式的复用提供了一种更明确的思路：避免重写组件本身，并允许有状态逻辑的不同部分能无缝地进行协同工作。</p><h2 id="✨-vue-hooks解决的问题" tabindex="-1">✨ vue-hooks解决的问题 <a class="header-anchor" href="#✨-vue-hooks解决的问题" aria-label="Permalink to &quot;✨ vue-hooks解决的问题&quot;">​</a></h2><ul><li><p>实现了mixins的功能,并解决了mixins的两个问题</p><ul><li>允许相互传递状态</li><li>明确指出了逻辑来自哪里。使用hooks，函数的返回值会记录消费的值</li></ul></li><li><p>vue-hooks是简化组件定义、复用状态逻辑的一种最新尝试，并且结合Vue实例的特点提供了适用的Hooks</p></li></ul><h2 id="💬-vben3-中的hooks" tabindex="-1">💬 Vben3 中的hooks <a class="header-anchor" href="#💬-vben3-中的hooks" aria-label="Permalink to &quot;💬 Vben3 中的hooks&quot;">​</a></h2><p>在Vben3中，hooks的定义规范如下：</p><ul><li>modules hooks 名称使用小驼峰命名</li><li>modules hooks 名称以 <code>use</code>为开头</li></ul><h2 id="🕸️-hooks-目录结构" tabindex="-1">🕸️ hooks 目录结构 <a class="header-anchor" href="#🕸️-hooks-目录结构" aria-label="Permalink to &quot;🕸️ hooks 目录结构&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">📁hooks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┣━━📁src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📁config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📁event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📁setting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📁web</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📄index.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📄useContext.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📄usePage.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📄usePromise.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📄useRefs.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── 📄useTitle.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┣━━ 📄index.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,10),p=[l];function o(t,h,r,k,c,d){return n(),a("div",null,p)}const b=s(i,[["render",o]]);export{E as __pageData,b as default};
