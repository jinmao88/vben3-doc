import{_ as s,o as a,c as n,a as e}from"./app.8a97897d.js";const k=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"✨ vue-hooks解决的问题","slug":"✨-vue-hooks解决的问题","link":"#✨-vue-hooks解决的问题","children":[]},{"level":2,"title":"💬 Vben3 中的hooks","slug":"💬-vben3-中的hooks","link":"#💬-vben3-中的hooks","children":[]},{"level":2,"title":"🕸️ hooks 目录结构","slug":"🕸️-hooks-目录结构","link":"#🕸️-hooks-目录结构","children":[]}],"relativePath":"packages/hooks/intro.md","lastUpdated":1710824039000}'),o={name:"packages/hooks/intro.md"},l=e(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h1><p>Vue hooks 受到 React hooks启发，可以让开发人员在不编写class的情况下使用状态和其他功能。</p><p>hooks 主要对模式的复用提供了一种更明确的思路：避免重写组件本身，并允许有状态逻辑的不同部分能无缝地进行协同工作。</p><h2 id="✨-vue-hooks解决的问题" tabindex="-1">✨ vue-hooks解决的问题 <a class="header-anchor" href="#✨-vue-hooks解决的问题" aria-hidden="true">#</a></h2><ul><li><p>实现了mixins的功能,并解决了mixins的两个问题</p><ul><li>允许相互传递状态</li><li>明确指出了逻辑来自哪里。使用hooks，函数的返回值会记录消费的值</li></ul></li><li><p>vue-hooks是简化组件定义、复用状态逻辑的一种最新尝试，并且结合Vue实例的特点提供了适用的Hooks</p></li></ul><h2 id="💬-vben3-中的hooks" tabindex="-1">💬 Vben3 中的hooks <a class="header-anchor" href="#💬-vben3-中的hooks" aria-hidden="true">#</a></h2><p>在Vben3中，hooks的定义规范如下：</p><ul><li>modules hooks 名称使用小驼峰命名</li><li>modules hooks 名称以 <code>use</code>为开头</li></ul><h2 id="🕸️-hooks-目录结构" tabindex="-1">🕸️ hooks 目录结构 <a class="header-anchor" href="#🕸️-hooks-目录结构" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">📁hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">┣━━📁src</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📁config</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📁event</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📁setting</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📁web</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📄index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📄useContext</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📄usePage</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📄usePromise</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📄useRefs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#A6ACCD;">   └── 📄useTitle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#A6ACCD;">┣━━ 📄index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"></span></code></pre></div>`,10),p=[l];function t(c,i,r,h,d,C){return a(),n("div",null,p)}const u=s(o,[["render",t]]);export{k as __pageData,u as default};
